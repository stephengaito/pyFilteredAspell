# This YAML is used to configure the pyFilteredAspell aspell command line 
# pre-filter wrapper. 

# `mapFilter` : (re)maps the filterName to a new filterName. This 
# allows you to map an arbitrary filterName into a name either aspell or 
# pyFilteredAspell understands.
#
mapFilter:
  javascript: ccpp
  latex: tex
  context: tex
  yaml: shell
  
# `mapFilterModule` : maps the filterName to a loadable Python module 
# in the `.config/pyFilteredAspellFilters` directory. This allows a single 
# Python module to handle multiple filterNames.
#
mapFilterModule:
  sass: commieFilter
  go: commieFilter
  c: commieFilter
  cpp: commieFilter
  css: commieFilter
  html: commieFilter
  python: commieFilter
  ruby: commieFilter
  shell: commieFilter

# `useAspellFilter` : maps the filterName to a boolean which if True 
# will ensure aspell's existing filter mode (with the name contained in 
# the filterName variable) will be used directly.
#
useAspellFilter:
  comment: True
  tex: True
  markdown: True
  ccpp: True

# `filterConfig` : provides configuation to the loaded filterModule.
#
# If you supply configuration for *both* the filterModule and the 
# filterName, any configuration corresponding to the filterModule is 
# overridden by the configuration corresponding to the filterName. (More 
# specific configuration overrides any less specific configuration). 
#
# For any `commieFilter` based filters, the `ignoreRegexps` is an array of 
# regular expressions for which any matching text will be filtered out of 
# the text passed to aspell. 
#
filterConfig:
  commieFilter:
    ignoreRegexps:
      # ignore URIs of various sorts
      - '(\w+:)?(\/?\/?)([^\s\/\.]+[\/\.])+[^\s\.]+'
      # ignore unix interpreter control lines
      - '^#!.*\n'

# uncomment the following lines to turn debugging ON
#
# The first `{}` in the file path will be replaced with the current unix 
# time.
#
#debug:
#  file: "/tmp/pyFilteredAspell-{}.log"

